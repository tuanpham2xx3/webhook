# GitHub Actions Workflow Example
# File: .github/workflows/deploy.yml
# Workflow n√†y build Docker image v√† g·ª≠i custom payload ƒë·∫øn webhook

name: Build and Deploy via Webhook

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare deployment payload
        id: payload
        run: |
          # Determine environment based on branch
          if [ "${{ github.ref_name }}" == "main" ]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          
          # Extract image details
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          BRANCH_NAME="${{ github.ref_name }}"
          VERSIONED_TAG="${BRANCH_NAME}-${SHORT_SHA}"
          
          # Create payload JSON
          cat > payload.json << EOF
          {
            "ref": "${{ github.ref }}",
            "repository": {
              "name": "${{ github.event.repository.name }}",
              "full_name": "${{ github.repository }}",
              "html_url": "${{ github.event.repository.html_url }}"
            },
            "pusher": {
              "name": "${{ github.actor }}",
              "email": "${{ github.event.pusher.email || github.actor }}@users.noreply.github.com"
            },
            "head_commit": {
              "id": "${COMMIT_SHA}",
              "message": "${{ github.event.head_commit.message || 'Manual deployment' }}",
              "url": "${{ github.event.head_commit.url || github.event.repository.html_url }}/commit/${COMMIT_SHA}"
            },
            "docker": {
              "registry": "${{ env.REGISTRY }}",
              "image_name": "${{ github.event.repository.name }}",
              "latest_tag": "latest",
              "versioned_tag": "${VERSIONED_TAG}",
              "latest_image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}",
              "versioned_image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSIONED_TAG}",
              "pull_command": "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}"
            },
            "deployment": {
              "environment": "${ENVIRONMENT}",
              "branch": "${BRANCH_NAME}",
              "commit": "${COMMIT_SHA}",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
          }
          EOF
          
          echo "payload<<EOF" >> $GITHUB_OUTPUT
          cat payload.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send webhook notification
        env:
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          PAYLOAD: ${{ steps.payload.outputs.payload }}
        run: |
          # Generate HMAC SHA256 signature
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$WEBHOOK_SECRET" | cut -d' ' -f2)
          
          # Send webhook request
          curl -X POST "$WEBHOOK_URL/deploy" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
            -H "X-GitHub-Event: workflow_run" \
            -H "X-GitHub-Delivery: ${{ github.run_id }}" \
            -H "User-Agent: GitHub-Actions/${{ github.run_id }}" \
            -d "$PAYLOAD" \
            --fail-with-body \
            --show-error

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment initiated successfully!" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "üåç Environment: ${{ steps.payload.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "üìù Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

# Required GitHub Secrets:
# WEBHOOK_URL - URL c·ªßa webhook server (v√≠ d·ª•: https://webhook.yourdomain.com)
# WEBHOOK_SECRET - Secret ƒë·ªÉ verify signature (ph·∫£i gi·ªëng v·ªõi WEBHOOK_SECRET tr√™n server)

# Workflow n√†y s·∫Ω:
# 1. Build Docker image cho branch hi·ªán t·∫°i
# 2. Push image l√™n GitHub Container Registry
# 3. T·∫°o custom payload v·ªõi th√¥ng tin Docker chi ti·∫øt
# 4. G·ª≠i webhook request v·ªõi payload n√†y
# 5. Webhook server s·∫Ω nh·∫≠n v√† deploy automatically 